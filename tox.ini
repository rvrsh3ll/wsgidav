[tox]
basepython = python3.12
envlist =
    check
    # mypy
    py313  # EOL 2028-10-31
    py312  # EOL 2028-10-31
    lxml
    py311  # EOL 2027-10-24
    py310  # EOL 2026-10-04
    py39  # EOL 2025-10-05
    py38  # EOL 2024-10-14
    # Deprecated:
    # py37  # EOL 2023-06-27
    # py36  # EOL 2021-12-21
    # py35  # EOL 2020-09-13
    # py34  # EOL 2019-03-18
    coverage

skip_missing_interpreters = true


; [testenv:py313]
; ignore_outcome = True

[testenv]
usedevelop = True
extras =
    test
passenv =
    LC_ALL
    LANG
deps =
    cheroot
    defusedxml
    Jinja2
    json5
    PyYAML
    pytest
    pytest-cov
    #pytest-remove-stale-bytecode
    pytest-html
    redis
    requests
    webtest
setenv =
    COVERAGE_FILE = build/.coverage.{envname}
commands =
    # Run everything from /tests folder:
    python -V
    ; pip install pytest-html==4.0.0rc4
    pip list
    # Note: also honors .coveragerc:
    pytest -ra -v -x --cov=wsgidav --durations=10 --html=build/pytest/report-{envname}.html --self-contained-html {posargs}
    ; pytest -ra -v -x --cov=wsgidav --durations=10 {posargs}



[testenv:lxml]
; skip_install = true
deps =
    {[testenv]deps}
    lxml
setenv =
    COVERAGE_FILE = build/.coverage.{envname}
commands =
    {[testenv]commands}

[testenv:coverage]
skip_install = true
deps =
    coverage
setenv =
    COVERAGE_FILE = build/.coverage
commands =
    coverage erase
    coverage combine
    # ENCODING ERRORS ON Windonws: See
    # https://github.com/pytest-dev/pytest-html/issues/336#issuecomment-1546864331
    coverage html --directory=build --ignore-errors
    ; coverage xml
    coverage report --fail-under=40.0 --skip-empty --ignore-errors


[testenv:mypy]
skip_install = true
deps =
    mypy
changedir = {toxinidir}
commands =
    mypy wsgidav tests


[testenv:lint]
skip_install = true
deps =
    ruff
commands =
    ruff -V
    ruff check wsgidav tests setup.py
    ruff format --check wsgidav tests setup.py


[testenv:format]
description = Reformat python code using ruff (Black, isort, and pyupgrade)
deps =
    {[testenv:lint]deps}
changedir = {toxinidir}
commands =
    ruff check --fix wsgidav tests setup.py
    ruff format wsgidav tests setup.py
    {[testenv:lint]commands}


; [testenv:upgrade]
; description = Upgrade Python syntax to least supported version
; deps =
;     {[testenv:format]deps}
;     pyupgrade
; allowlist_externals:
;     bash
; changedir = {toxinidir}
; commands =
;     # Needs bash-style file pattern expansion:
;     bash -ec 'pyupgrade --py37-plus --exit-zero-even-if-changed wsgidav/*.py tests/*.py setup.py'
;     {[testenv:format]commands}


[testenv:docs]
description = Build Sphinx documentation (output directory: docs/sphinx-build)
changedir = docs
deps =
    sphinx
    furo
    readthedocs-sphinx-search
    sphinx_rtd_theme
    myst-parser[linkify]
    sphinxcontrib-googleanalytics
    sphinxcontrib-mermaid
commands =
    # http://www.sphinx-doc.org/en/master/man/sphinx-build.html
    sphinx-build -b html source build


[testenv:stressor]
description =
    Execute stressor test and benchmark
    (Needs `wsgidav --root tests/stressor/htdocs/ --host 127.0.0.1 --port 8082 --auth anonymous --no-config -q`)
changedir = {toxinidir}
deps =
    stressor
commands =
    ; stressor run tests/stressor/test_rw.yaml --single --max-errors=0 -q {posargs}
    stressor run tests/stressor/test_rw.yaml -q {posargs}


[testenv:bdist_msi]
description = Build MSI installer in dist/ (Windows only)
# basepython = python3.12
changedir = .
deps =
    cx_Freeze
commands =
    # http://www.sphinx-doc.org/en/master/man/sphinx-build.html
    python setup_bdist_msi.py bdist_msi
